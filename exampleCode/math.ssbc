/*
subroutines:

ADDWC (add with carry)
	-calculates carry of 8 bit addition

ADD16 (add words)
	-calculates the addition of two words
	
SUB16 (subtract words)
	-calculate the subtraction of two words
	
TEST16 (test word)
	-test top word of stack and returns PSW on stack
	
XOR (exclusive or)
	-calculate bitwise xor of top two bytes on stack
*/

.global ADDWC
.global ADD16
.global SUB16
.global TEST16
.global XOR

//global register
.global CARRY

ADDWC:
//add two bytes and track if there is a carry
//returns a byte and saves the carry in CARRY
	popext16 ADDWC_RET_ADDR
//test sign of first byte
	test
	popext ADDWC_TEMP
	pushimm 0
	jnn ADDWC_FIRST_POS
//first negative
	add
	jnn ADDWC_DIFF_SIGNS
//both are negative
	pushimm 1
	popext CARRY
	pushext ADDWC_TEMP
	add
	jump ADDWC_RETURN
ADDWC_FIRST_POS:
	add
	jnn ADDWC_SECOND_POS
ADDWC_DIFF_SIGNS:
	pushext ADDWC_TEMP
	add
	jnn ADDWC_DIFF_RES_POS
//diff result is negative
	pushimm 0
	popext CARRY
	jump ADDWC_RETURN
ADDWC_DIFF_RES_POS:
	pushimm 1
	popext CARRY
	jnn ADDWC_RETURN
ADDWC_SECOND_POS:
	pushimm 0
	popext CARRY
	pushext ADDWC_TEMP
	add
ADDWC_RETURN:
	jump ?
ADDWC_RET_ADDR: .word 0
ADDWC_TEMP: .byte 0
CARRY: .byte 0



ADD16:
//add two 16 bit integers
//returns a 16 bit integer
	popext16 ADD16_RET_ADDR
	popext ADD16_HIGH1
	popext ADD16_LOW1
	popext ADD16_HIGH2
	pushext ADD16_LOW1
	jsr ADDWC
	pushext ADD16_HIGH1
	pushext ADD16_HIGH2
	add
	pushext CARRY
	add
	jump ?
ADD16_RET_ADDR: .word 0
ADD16_HIGH1: .byte 0
ADD16_LOW1: .byte 0
ADD16_HIGH2: .byte 0
ADD16_LOW2: .byte 0



SUB16:
//subtract two 16 bit integers
//returns a 16 bit integer
	popext16 SUB16_RET_ADDR
	popext16 SUB16_TEMP_WORD
	not
	popext SUB16_TEMP_BYTE
	not
	pushext SUB16_TEMP_BYTE
	pushext 1
	jsr ADD16
	pushext16 SUB16_TEMP_WORD
	jsr ADD16
	jnz ?
SUB16_RET_ADDR: .word 0
SUB16_TEMP_WORD: .word 0
SUB16_TEMP_BYTE: .byte 0



TEST16:
//set Z and N flags in PSW for a 16 bit integer
//does not alter word on top of stack
//returns psw on top of stack
	popext TEST16_RET_ADDR
	test
	jnn TEST16_NOT_NEG
	jnz TEST16_RETURN //word is negative
TEST16_NOT_NEG:
	jnz TEST16_RETURN//word is positive
	//high byte is zero
	popext ASM
	test
	pushext ASM
TEST16_RETURN:
	pushext PSW
	jump ?
TEST16_RET_ADDR: .word 0



XOR:
	popext16 XOR_RET_ADDR
	popext ASM
	popext ASM2
	pushext ASM
	pushext ASM2
	pushext ASM2
	pushext ASM
	not
	and
	popext XOR_TEMP
	not
	and
	pushext XOR_TEMP
	or
	jnz ?
XOR_RET_ADDR: .word 0
XOR_TEMP: .byte 0