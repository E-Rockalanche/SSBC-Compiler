/* ########## long fibRecursive(long) ########### */
	longfibRecursivelong:
/* Pop return address to temp */
	popext16 L2
/* Pop function arguments */
	popext16 L3
/* Push return address from temp */
	pushext16 L2
/* Function body */
/* <= */
	pushext L3 + 1
	pushext L3 + 0
/* Literal */
	pushimm 0
/* Converting const int to long */
/* End type conversion */
	jsr SUB16
	jsr TEST16
	popext PSW
	popinh16
	jnn L4
	pushimm 0
	jump L5
	L4: pushimm 1
	L5:
/* End <= */
	test popinh
	jnz L6
	jump L7
	L6: 
/* Calculating return value */
/* Literal */
	pushimm 0
/* Converting const int to long */
/* End type conversion */
/* Return */
	jump L0
	jump L8
	L7: 
	L8: 
/* <= */
	pushext L3 + 1
	pushext L3 + 0
/* Literal */
	pushimm 2
/* Converting const int to long */
/* End type conversion */
	jsr SUB16
	jsr TEST16
	popext PSW
	popinh16
	jnn L9
	pushimm 0
	jump L10
	L9: pushimm 1
	L10:
/* End <= */
	test popinh
	jnz L11
	jump L12
	L11: 
/* Calculating return value */
/* Literal */
	pushimm 1
/* Converting const int to long */
/* End type conversion */
/* Return */
	jump L0
	jump L13
	L12: 
	L13: 
/* Calculating return value */
/* + */
/* Saving local scope */
	pushext L1 + 1
	pushext L1 + 0
/* Compiling function arguments */
/* - */
/* Literal */
	pushimm 2
/* Converting const int to long */
/* End type conversion */
	pushext L3 + 1
	pushext L3 + 0
	jsr SUB16
/* End - */
	jsr longfibRecursivelong
/* saving return value to temp location */
	popext16 L14
	popext L1 + 0
	popext L1 + 1
/* Restoring return value from temp location */
	pushext16 L14
/* Saving local scope */
	pushext L1 + 1
	pushext L1 + 0
/* Compiling function arguments */
/* - */
/* Literal */
	pushimm 1
/* Converting const int to long */
/* End type conversion */
	pushext L3 + 1
	pushext L3 + 0
	jsr SUB16
/* End - */
	jsr longfibRecursivelong
/* saving return value to temp location */
	popext16 L15
	popext L1 + 0
	popext L1 + 1
/* Restoring return value from temp location */
	pushext16 L15
	jsr ADD16
/* End + */
/* Return */
	jump L0
/* Return to call address */
	L0:
/* Pop return address to jump instruction */
	popext16 L16
	popext16 L2
	pushext16 L16
	jump ?
	L2: .word 0
/* ########## End of long fibRecursive(long) ########## */
/* Local data to function */
	L1:
L3: .word 0
/* ########## long fibLoop(long) ########### */
	longfibLooplong:
/* Pop return address to temp */
	popext16 L19
/* Pop function arguments */
	popext16 L20
/* Push return address from temp */
	pushext16 L19
/* Function body */
/* <= */
	pushext L20 + 1
	pushext L20 + 0
/* Literal */
	pushimm 0
/* Converting const int to long */
/* End type conversion */
	jsr SUB16
	jsr TEST16
	popext PSW
	popinh16
	jnn L21
	pushimm 0
	jump L22
	L21: pushimm 1
	L22:
/* End <= */
	test popinh
	jnz L23
	jump L24
	L23: 
/* Calculating return value */
/* Literal */
	pushimm 0
/* Converting const int to long */
/* End type conversion */
/* Return */
	jump L17
	jump L25
	L24: 
	L25: 
	pushimm16 L27
	popext16 L26
/* Assignment */
/* Literal */
	pushimm 0
/* Converting const int to long */
/* End type conversion */
/* Array assignment */
	pushext L26 + 1
	pushext L26 + 0
/* Literal */
	pushimm 0
/* Converting const int to long */
/* End type conversion */
/* Calculate array offset */
	pushimm16 2
	jsr MULT16
/* End Calculate array offset */
	jsr ADD16
	pushimm 2
	jsr POP_TO_ADDR
/* End array assignment */
/* End Assignment */
/* Assignment */
/* Literal */
	pushimm 1
/* Converting const int to long */
/* End type conversion */
/* Array assignment */
	pushext L26 + 1
	pushext L26 + 0
/* Literal */
	pushimm 1
/* Converting const int to long */
/* End type conversion */
/* Calculate array offset */
	pushimm16 2
	jsr MULT16
/* End Calculate array offset */
	jsr ADD16
	pushimm 2
	jsr POP_TO_ADDR
/* End array assignment */
/* End Assignment */
/* Assignment */
/* Literal */
	pushimm 2
/* Converting const int to long */
/* End type conversion */
	popext L28 + 0
	popext L28 + 1
/* End Assignment */
	L29:
/* <= */
	pushext L28 + 1
	pushext L28 + 0
	pushext L20 + 1
	pushext L20 + 0
	jsr SUB16
	jsr TEST16
	popext PSW
	popinh16
	jnn L33
	pushimm 0
	jump L34
	L33: pushimm 1
	L34:
/* End <= */
	test popinh
	jnz L30
	jump L31
	L30:
/* Assignment */
/* + */
/* Array accessor */
	pushext L26 + 1
	pushext L26 + 0
/* - */
/* Literal */
	pushimm 2
/* Converting const int to long */
/* End type conversion */
	pushext L28 + 1
	pushext L28 + 0
	jsr SUB16
/* End - */
/* Calculate array offset */
	pushimm16 2
	jsr MULT16
/* End Calculate array offset */
	jsr ADD16
	pushimm 2
	jsr PUSH_FROM_ADDR
/* End array accessor */
/* Array accessor */
	pushext L26 + 1
	pushext L26 + 0
/* - */
/* Literal */
	pushimm 1
/* Converting const int to long */
/* End type conversion */
	pushext L28 + 1
	pushext L28 + 0
	jsr SUB16
/* End - */
/* Calculate array offset */
	pushimm16 2
	jsr MULT16
/* End Calculate array offset */
	jsr ADD16
	pushimm 2
	jsr PUSH_FROM_ADDR
/* End array accessor */
	jsr ADD16
/* End + */
/* Array assignment */
	pushext L26 + 1
	pushext L26 + 0
	pushext L28 + 1
	pushext L28 + 0
/* Calculate array offset */
	pushimm16 2
	jsr MULT16
/* End Calculate array offset */
	jsr ADD16
	pushimm 2
	jsr POP_TO_ADDR
/* End array assignment */
/* End Assignment */
	L32:
/* Assignment */
/* + */
/* Literal */
	pushimm 1
/* Converting const int to long */
/* End type conversion */
	pushext L28 + 1
	pushext L28 + 0
	jsr ADD16
/* End + */
	popext L28 + 0
	popext L28 + 1
/* End Assignment */
	jump L29
	L31:
/* Calculating return value */
/* Array accessor */
	pushext L26 + 1
	pushext L26 + 0
	pushext L20 + 1
	pushext L20 + 0
/* Calculate array offset */
	pushimm16 2
	jsr MULT16
/* End Calculate array offset */
	jsr ADD16
	pushimm 2
	jsr PUSH_FROM_ADDR
/* End array accessor */
/* Return */
	jump L17
/* Return to call address */
	L17:
/* Pop return address to jump instruction */
	popext16 L35
	popext16 L19
	pushext16 L35
	jump ?
	L19: .word 0
/* ########## End of long fibLoop(long) ########## */
/* Local data to function */
	L18:
L20: .word 0
L26: .word 0
L28: .word 0
/* ########## void main() ########### */
	.start
/* Function body */
/* Assignment */
/* Literal */
	pushimm16 65532
/* Converting const long to int * */
/* End type conversion */
	popext L39 + 0
	popext L39 + 1
/* End Assignment */
/* Assignment */
/* Array accessor */
	pushext L39 + 1
	pushext L39 + 0
/* Literal */
	pushimm 1
/* Converting const int to long */
/* End type conversion */
	jsr ADD16
	pushimm 1
	jsr PUSH_FROM_ADDR
/* End array accessor */
/* Converting int to long */
/* End type conversion */
	popext L40 + 0
	popext L40 + 1
/* End Assignment */
/* Assignment */
/* Compiling function arguments */
	pushext L40 + 1
	pushext L40 + 0
	jsr longfibLooplong
/* Converting long to int */
	popinh
/* End type conversion */
/* Array assignment */
	pushext L39 + 1
	pushext L39 + 0
/* Literal */
	pushimm 0
/* Converting const int to long */
/* End type conversion */
	jsr ADD16
	pushimm 1
	jsr POP_TO_ADDR
/* End array assignment */
/* End Assignment */
/* Assignment */
/* Compiling function arguments */
	pushext L40 + 1
	pushext L40 + 0
	jsr longfibRecursivelong
/* Converting long to int */
	popinh
/* End type conversion */
/* Array assignment */
	pushext L39 + 1
	pushext L39 + 0
/* Literal */
	pushimm 2
/* Converting const int to long */
/* End type conversion */
	jsr ADD16
	pushimm 1
	jsr POP_TO_ADDR
/* End array assignment */
/* End Assignment */
/* Return to call address */
	L36:
	halt
/* ########## End of void main() ########## */
/* Local data to function */
	L37:
L39: .word 0
L40: .word 0
L14: .word 0
L15: .word 0
L16: .word 0
L27: .array 200
L35: .word 0
