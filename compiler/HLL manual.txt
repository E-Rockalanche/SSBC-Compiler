========================
	    HLL rules
========================

primitive types:
void, char, int, long

define a pointer by adding an asterisk
ex) int** mypointer

define an array by adding a size in brackets
ex) long[8] myArray

must define a void main() function for program to run

========================
	Compiler Grammar
========================

*grammar rules start with an upper case
*terminals start with a lower case

identifier = 	[a-zA-Z_][a-zA-Z0-9_]*
hexadecimal = 	0x[0-9a-fA-F]*
decimal = 		[-]?[1-9][0-9]*[lL]?
octal = 		0[0-7]*
binary = 		0b[01]*
char = 			'[\]?[ -~]'
string = 		"[ -~]*"

Program -> GlobalStatements

GlobalStatements -> GlobalStatement
GlobalStatements ->

GlobalStatement -> FunctionDefinition

FunctionDefinition -> Type identifier ( Parameters ) { StatementSequence }
FunctionDefinition -> Type identifier ( ) { StatementSequence }

Parameters -> Parameter , Parameters
Parameters -> Parameter

Parameter -> Type identifier

StatementSequence -> Statement
StatementSequence ->

Statement -> CompoundStatement
Statement -> VariableDef
Statement -> Assignment
Statement -> IfElse
Statement -> WhileLoop
Statement -> DoWhileLoop
Statement -> ForLoop
Statement -> Switch
Statement -> exit
Statement -> continue
Statement -> break
Statement -> FunctionCall

CompoundStatement -> { StatementSequence }

VariableDef -> Type identifier = Expression
VariableDef -> Type identifier

Assignment -> AssignmentExpression = Expression

IfElse -> if ( Expression ) Statement ElseBlock

ElseBlock -> else Statement
ElseBlock -> 

WhileLoop -> while ( Exression ) Statement

DoWhileLoop -> do Statement while ( Expression )

ForLoop -> for ( Statement ; Expression ; Statement ) Statement

Switch -> switch ( Expression ) { Cases }

Cases -> Case Cases
Cases ->

Case -> default : StatementSequence
Case -> Literal : StatementSequence

FunctionCall -> identifier ( Arguments )
FunctionCall -> identifier ( )

Arguments -> Expression
Arguments -> Expression , Arguments

Type -> identifier Pointers

Pointers -> * Pointers
Pointers ->

AssignmentExpression -> VariableAssignment
AssignmentExpression -> ArrayAssignment

VariableAssignment -> identifier

ArrayAssignment -> identifier [ Expression ]

Expression -> BooleanExpression

BooleanExpression -> RelationalExpression && BooleanExpression
BooleanExpression -> RelationalExpression || BooleanExpression
BooleanExpression -> RelationalExpression

RelationalExpression -> EqualityExpression < RelationalExpression
RelationalExpression -> EqualityExpression <= RelationalExpression
RelationalExpression -> EqualityExpression > RelationalExpression
RelationalExpression -> EqualityExpression >= RelationalExpression
RelationalExpression -> EqualityExpression

EqualityExpression -> AdditiveExpression == EqualityExpression
EqualityExpression -> AdditiveExpression != EqualityExpression
EqualityExpression -> AdditiveExpression

AdditiveExpression -> MultiplicitiveExpression + AdditiveExpression
AdditiveExpression -> MultiplicitiveExpression - AdditiveExpression
AdditiveExpression -> MultiplicitiveExpression

MultiplicitiveExpression -> UnaryExpression * MultiplicitiveExpression
MultiplicitiveExpression -> UnaryExpression

UnaryExpression -> BitwiseNotExpression
UnaryExpression -> BooleanNotExpression
UnaryExpression -> DereferenceExpression
UnaryExpression -> ReferenceExpression
UnaryExpression -> ArrayAccessorExpression
UnaryExpression -> EnclosedExpression
UnaryExpression -> FunctionCall
UnaryExpression -> VariableExpression
UnaryExpression -> LiteralExpression

BitwiseNotExpression -> ~ UnaryExpression

BooleanNotExpression -> ! UnaryExpression

DereferenceExpression -> * UnaryExpression

ArrayAccessorExpression -> identifier [ Expression ]

EnclosedExpression -> ( Expression )

VariableExpression -> identifier

LiteralExpression -> Integer | char | string

Integer -> hexadecimal | decimal | octal | binary